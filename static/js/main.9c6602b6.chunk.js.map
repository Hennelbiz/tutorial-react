{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"oNAwCMA,EAAc,WAChB,OACI,gCACI,+BACI,sCAGA,qCAGA,8CASVC,EAAY,SAACC,GAuBf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACvC,OACI,+BACI,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACI,wBAAQC,QAAW,kBAAMR,EAAMS,gBAAgBJ,IAA/C,wBAJGA,MAWnB,OAAO,gCAAQJ,KA6BJS,EAXD,SAACV,GACX,IAAOE,EAAkCF,EAAlCE,cAAeO,EAAmBT,EAAnBS,gBAEtB,OACI,kCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWP,cAAiBA,EAAeO,gBAAmBA,Q,OCpE3DE,E,4MAhDXC,aAAe,CACXN,KAAM,GACNC,IAAK,I,EAGTM,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GACZ,MAAwBA,EAAMC,OAAtBV,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACKZ,EAAOW,K,EAIhBE,WAAa,WACT,EAAKnB,MAAMoB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,4CAGvB,WACI,MAAsBS,KAAKR,MAAnBP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAEd,OACI,iCACI,uBAAOe,QAAQ,OAAf,kBACA,uBACIC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eACnB,uBAAOQ,QAAQ,MAAf,iBACA,uBACIC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACnB,uBACIS,KAAK,SACLN,MAAM,SACNT,QAASa,KAAKF,oB,GA3CfO,aCwFJC,E,4MApFXd,MAAQ,CACJe,WAAY,I,EAoBhBnB,gBAAkB,SAACJ,GACf,IAAQuB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CACVU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACtC,OAAOA,IAAM1B,Q,EAKzBe,aAAe,SAACU,GACZ,EAAKZ,SAAS,CAACU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,4CAG1D,WAyBI,IAAQF,EAAeP,KAAKR,MAApBe,WAeR,OACI,sBAAKI,UAAY,YAAjB,UACI,cAAC,EAAD,CAAO9B,cAAiB0B,EAAYnB,gBAAmBY,KAAKZ,kBAC5D,cAAC,EAAD,CAAMW,aAAgBC,KAAKD,sB,GAhFzBM,a,MCElBO,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9c6602b6.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\n//Usando un componente de clase\r\n//Un componente de clase debe de inclyuir render() y el return solo puede regresar un elemento padre\r\n/*class Table extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Job</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Charlie</td>\r\n                        <td>Janitor</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Mac</td>\r\n                        <td>Bouncer</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Dee</td>\r\n                        <td>ASpiring actress</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Dennis</td>\r\n                        <td>Bartender</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}*/\r\n\r\n//Usando componentes simples (La diferencia radica en que los componentes simples no usan la palabra reservada CLASS)\r\nconst TableHeader = () => {\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                <th>\r\n                    Name\r\n                </th>\r\n                <th>\r\n                    Job\r\n                </th>\r\n                <th>\r\n                    Remove\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\n//En el componente simple se debe agregar el props para definirle que se ingresaran propiedades\r\nconst TableBody = (props) => {\r\n    /*return(\r\n        <tbody>\r\n            <tr>\r\n                <td>Charlie</td>\r\n                <td>Janitor</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Mac</td>\r\n                <td>Bouncer</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Dee</td>\r\n                <td>Aspiring actress</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Dennis</td>\r\n                <td>Bartender</td>\r\n            </tr>                        \r\n        </tbody>\r\n    )*/\r\n    //Aqui con todos los datos que ingresan creamos fila por fila\r\n    //Siempre que se hagan listas en React se deben usar KEYS para identificar cada item\r\n    const rows = props.characterData.map((row, index) => {\r\n        return(\r\n            <tr key = {index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td>\r\n                    <button onClick = {() => props.removeCharacter(index)}>Delete</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    //Luego con las filas ya creadas simplemente lo colocamos en el body de la tabla\r\n    return <tbody>{rows}</tbody>\r\n}\r\n\r\n/*class Table extends Component\r\n{\r\n    render(){\r\n        //Simplemente para obtener los datos que vienen desde el DOM simplemente se crea su variable y se obtiene con this.props\r\n        const {characterData} = this.props\r\n\r\n        return(\r\n            <table>\r\n                <TableHeader/>\r\n                <TableBody characterData = {characterData} />\r\n            </table>\r\n        );\r\n    }\r\n}*/\r\n\r\nconst Table = (props) => {\r\n    const {characterData, removeCharacter} = props\r\n\r\n    return(\r\n        <table>\r\n            <TableHeader/>\r\n            <TableBody characterData = {characterData} removeCharacter = {removeCharacter}/>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    initialState = {\r\n        name: '',\r\n        job: ''\r\n    }\r\n\r\n    state = this.initialState\r\n\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { name, job } = this.state;\r\n\r\n        return (\r\n            <form>\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange} />\r\n                <label htmlFor=\"job\">Job</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    id=\"job\"\r\n                    value={job}\r\n                    onChange={this.handleChange} />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    onClick={this.submitForm} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react'\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nclass App extends Component {\r\n    //Con los state la informacion puede ser guardada y modificada sin que necesariamente se agregue a la base de datos\r\n    state = {\r\n        characters: [\r\n            /*{\r\n                name: 'Charlie',\r\n                job: 'Janitor',\r\n            },\r\n            {\r\n                name: 'Mac',\r\n                job: 'Bouncer',\r\n            },\r\n            {\r\n                name: 'Dee',\r\n                job: 'Aspring actress',\r\n            },\r\n            {\r\n                name: 'Dennis',\r\n                job: 'Bartender',\r\n            },*/\r\n        ],\r\n    }\r\n\r\n    removeCharacter = (index) => {\r\n        const { characters } = this.state\r\n\r\n        this.setState({\r\n            characters: characters.filter((character, i) => {\r\n                return i !== index\r\n            }),\r\n        })\r\n    }\r\n\r\n    handleSubmit = (character) => {\r\n        this.setState({characters: [...this.state.characters, character]})\r\n    }\r\n\r\n    render() {\r\n\r\n        //Crear un array del tipo JSON para cargar los datos en lugar de hacerlo a mano en la tabla\r\n        //Props es una manera efectiva de pasar informacion a un componente\r\n        //En este caso el componente no puede modificar la propiedad solo es de lectura sin escritura\r\n        /*const characters = \r\n        [\r\n            {\r\n                name: 'Charlie',\r\n                job: 'Janitor',\r\n            },\r\n            {\r\n                name: 'Mac',\r\n                job: 'Bouncer',\r\n            },\r\n            {\r\n                name: 'Dee',\r\n                job: 'Aspring actress',\r\n            },\r\n            {\r\n                name: 'Dennis',\r\n                job: 'Bartender',\r\n            },\r\n        ]*/\r\n\r\n        const { characters } = this.state\r\n\r\n        //El characterData es un nombre definido por el usuario no son palabras reservadas\r\n        /*return(\r\n            <div className=\"App\">\r\n                <Table characterData = {characters} /> \r\n            </div>\r\n        );*/\r\n\r\n        /*return (\r\n            <div className=\"container\">\r\n                <Table characterData={characters} removeCharacter={this.removeCharacter} />\r\n            </div>\r\n        );*/\r\n\r\n        return(\r\n            <div className = \"container\">\r\n                <Table characterData = {characters} removeCharacter = {this.removeCharacter}/>\r\n                <Form handleSubmit = {this.handleSubmit}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM  from 'react-dom';\r\nimport App from './App';\r\n//import App from './Api';\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}